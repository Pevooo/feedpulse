name: AI API

on:
  push:
    branches:
      - main
    paths:
      - 'ai-api/**'
      - '.github/workflows/ai-api.yml'
  pull_request:
    paths:
      - 'ai-api/**'
      - '.github/workflows/ai-api.yml'

env:
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
  TEST_AC_TOKEN: ${{ secrets.TEST_AC_TOKEN }}

permissions:
  contents: read
  pull-requests: write  

concurrency:
  group: ai-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: Run All Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
      
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10.6'

      - name: Install Code Linter (Flake8)
        run: pip install flake8

      - name: Run Code Linter (Flake8)
        run: flake8 --max-line-length=180 .

      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ai-api/requirements.txt
          pip install tabulate

      - name: Run Unit Tests
        run: |
          PYTHONPATH=./ai-api python -m unittest discover -s "ai-api/test/unit_tests" -p "test_*.py"

      - name: Run Integration Tests
        run: |
          PYTHONPATH=./ai-api python -m unittest discover -s "ai-api/test/integration" -p "test_*.py"

      - name: Run Performance Tests
        if: github.event_name == 'pull_request' && success()
        run: |
          if [ -f "ai-api/test/performance/performance_test.py" ]; then
            PYTHONPATH=./ai-api python ai-api/test/performance/performance_test.py
          else
            echo "Performance test file not found, skipping..."
          fi
      
      - name: Post Performance Results as PR Comment
        if: github.event_name == 'pull_request' && success()
        uses: mshick/add-pr-comment@v2
        with:
          message-path: ai-api/test/performance/performance_report.md
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message-id: 'performance_test_comment'

      - name: Install wrk
        if: github.event_name == 'pull_request' && success()
        run: |
          sudo apt update
          sudo apt install -y wrk

      - name: Start Flask API
        if: github.event_name == 'pull_request' && success()
        run: |
          nohup python ai-api/run_app.py > api.log 2>&1 &  # Start API and redirect output
          echo "Waiting for API to start..."
          sleep 15
          curl --retry 5 --retry-delay 3 --retry-connrefused http://127.0.0.1:5000/instagram_webhook || (echo "API failed to start!" && cat api.log && exit 1)

      - name: Run Load Tests
        if: github.event_name == 'pull_request' && success()
        id: benchmark
        run: |
          URL_register="http://127.0.0.1:5000/register_token"

          # Create Lua script for wrk to send JSON payload
          cat <<EOL > register_post.lua
          wrk.method = "POST"
          wrk.body   = '{"access_token": "test", "platform": "facebook", "page_id": "1251512561"}'
          wrk.headers["Content-Type"] = "application/json"
          EOL

          # Define different test cases
          TEST1=$(wrk -t2 -c10 -d30s -T30s -s register_post.lua $URL_register)
          TEST2=$(wrk -t4 -c20 -d30s -T30s -s register_post.lua $URL_register)
          
          # Format results
          echo "### Load Test Results" > wrk_results.md
          echo "#### **Test 1**: 2 threads, 10 connections, 60s" >> wrk_results.md
          echo '```' >> wrk_results.md
          echo "$TEST1" >> wrk_results.md
          echo '```' >> wrk_results.md
          
          echo "#### **Test 2**: 4 threads, 20 connections, 60s" >> wrk_results.md
          echo '```' >> wrk_results.md
          echo "$TEST2" >> wrk_results.md
          echo '```' >> wrk_results.md

          URL_webhook="http://127.0.0.1:5000/facebook_webhook"

          cat <<EOL > webhook_post.lua
          wrk.method = "POST"
              wrk.body   = '{
                "entry": [{
                  "id": "448242228374517",
                  "time": 1742667607,
                  "changes": [{
                    "value": {
                      "from": {"id": "448242228374517", "name": "SuperTester"},
                      "post": {"status_type": "mobile_status_update", "is_published": true, "updated_time": "2025-03-22T18:20:04+0000", "promotion_status": "inactive", "id": "448242228374517_122131676912594941"},
                      "message": "test message",
                      "post_id": "448242228374517_122131676912594941",
                      "comment_id": "122131676912594941_1213590066982748",
                      "created_time": 1742667604,
                      "item": "comment",
                      "parent_id": "122131676912594941_542072878449250",
                      "verb": "add"
                    },
                    "field": "feed"
                  }]
                }],
                "object": "page"
              }'
          wrk.headers["Content-Type"] = "application/json"
          EOL

          WEBHOOK_TEST1=$(wrk -t2 -c10 -d30s -T30s -s webhook_post.lua $URL_webhook)
          WEBHOOK_TEST2=$(wrk -t4 -c20 -d30s -T30s -s webhook_post.lua $URL_webhook)

          echo "#### **WEBHOOK_TEST1**: 2 threads, 10 connections, 60s" >> wrk_results.md
          echo '```' >> wrk_results.md
          echo "$WEBHOOK_TEST1" >> wrk_results.md
          echo '```' >> wrk_results.md
          
          echo "#### **WEBHOOK_TEST2**: 4 threads, 20 connections, 60s" >> wrk_results.md
          echo '```' >> wrk_results.md
          echo "$WEBHOOK_TEST2" >> wrk_results.md
          echo '```' >> wrk_results.md

      - name: Comment on PR with Benchmark Results
        if: github.event_name == 'pull_request' && success()
        uses: mshick/add-pr-comment@v2
        with:
          message-path: wrk_results.md
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message-id: 'load_test_comment'

  deploy:
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.VM_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy to VM
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            cd graduation-project/
            git pull origin main
            cd ai-api/
            source venv/bin/activate
            pip install -r requirements.txt
        
            sudo systemctl restart feedpulse.service  # Restart the app if it's running as a service